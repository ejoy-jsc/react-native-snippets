{
  "Import react": {
    "prefix": "imr",
    "body": [
      "import React from 'react';"
    ],
    "description": "Import react"
  },
  "Import react component": {
    "prefix": "imrc",
    "body": [
      "import React, { Component } from 'react';"
    ],
    "description": "Import react component"
  },
  "Import React-Native Element": {
    "prefix": "imrn",
    "body": "import { $1 } from 'react-native';",
    "description": "Import React-Native Element"
  },
  "Import Styled-Components": {
    "prefix": "ims",
    "body": "import styled from 'styled-components';",
    "description": "Import Styled-Components"
  },
  "Import Styled-Components Native": {
    "prefix": "imsn",
    "body": "import styled from 'styled-components/native';",
    "description": "Import Styled-Components"
  },
  "Redux constant": {
    "prefix": "rct",
    "body": "export const $1 = '$1';"
  },
  "Print to console": {
    "prefix": "cl",
    "body": [
      "console.log($1)"
    ],
    "description": "Log output to console"
  },
  "Export default": {
    "prefix": "ed",
    "body": [
      "export default $1;"
    ],
    "description": "Export default"
  },
  "EslintDisableLine": {
    "prefix": "edl",
    "body": "// eslint-disable-line",
    "description": "Eslint Disable Line"
  },
  "EslintDisableNextLine": {
    "prefix": "ednl",
    "body": "// eslint-disable-next-line",
    "description": "Eslint Disable Next Line"
  },
  "Comment Block": {
    "prefix": "cm",
    "body": [
      "/**",
      " * ${1}",
      " */"
    ]
  },
  "Stateless Component": {
    "prefix": "sl",
    "body": [
      "const $1 = () => (",
      "\t$2",
      ");",
      "",
      "export default $1;"
    ]
  },
  "Redux Reducer": {
    "prefix": "rrd",
    "body": [
      "export default (state = $1, action) => {",
      "\tswitch (action.type) {",
      "\t\tcase $2:",
      "\t\t\t$3",
      "\t\tdefault:",
      "\t\t\treturn state;",
      "\t}",
      "};"
    ]
  },
  "Redux Pure Function": {
    "prefix": "rpf",
    "body": [
      "export const $1 = '$1';",
      "",
      "export function $2($3) {",
      "\treturn {",
      "\t\ttype: $1,",
      "\t\t$3",
      "\t}",
      "}"
    ]
  },
  "Redux Pure Function Const": {
    "prefix": "rpc",
    "body": [
      "export const $1 = '$1';",
      "",
      "export const $2 = $3 => ({",
      "\ttype: $1,",
      "\t$3",
      "});"
    ]
  },
  "Comment Big Block": {
    "prefix": "cmmb",
    "body": [
      "/**",
      "|--------------------------------------------------",
      "| $1",
      "|--------------------------------------------------",
      "*/"
    ]
  },
  "ComponentWillMount": {
    "prefix": "cwm",
    "body": [
      "componentWillMount() {",
      "\t$1",
      "}"
    ]
  },
  "ComponentWillUpdate": {
    "prefix": "cwu",
    "body": [
      "componentWillUpdate() {",
      "\t$1",
      "}"
    ]
  },
  "ComponentDidUpdate": {
    "prefix": "cdu",
    "body": [
      "componentDidUpdate(prevProps, prevState) {",
      "\t$1",
      "}"
    ]
  },
  "ComponentWillReceiveProps": {
    "prefix": "cwrp",
    "body": [
      "componentWillReceiveProps(nextProps) {",
      "\t$1",
      "}"
    ]
  },
  "Comment big line": {
    "prefix": "cbl",
    "body": "// ============================================================"
  },
  "Component Class": {
    "prefix": "ccs",
    "body": [
      "class $1 extends Component {",
      "\tstate = { $2 }",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$3",
      "\t\t);",
      "\t}",
      "}",
      "",
      "export default $1;"
    ]
  },
  "Export default Component Class": {
    "prefix": "edccs",
    "body": [
      "export default class $1 extends Component {",
      "\tstate = { $2 }",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$3",
      "\t\t);",
      "\t}",
      "}"
    ]
  },
  "Connect Redux": {
    "prefix": "crr",
    "body": "import { connect } from 'react-redux';"
  },
  "ComponentDidMount": {
    "prefix": "cdm",
    "body": [
      "componentDidMount() {",
      "\t$1",
      "}"
    ]
  },
  "EStyleSheet Style": {
    "prefix": "ess",
    "body": [
      "import EStyleSheet from 'react-native-extended-stylesheet';",
      "",
      "const styles = EStyleSheet.create({",
      "\t$1",
      "});",
      "",
      "export default styles;"
    ]
  },
  "Stateless Component Function": {
    "prefix": "slc",
    "body": [
      "function $1($2) {",
      "\t$3",
      "}",
      "",
      "export default $1;"
    ]
  },
  "Styled Component": {
    "prefix": "styc",
    "body": [
      "const $1 = styled.$2`",
      "\t$3",
      "`"
    ]
  },
  "Export Styled Component": {
    "prefix": "estyc",
    "body": [
      "export const $1 = styled.$2`",
      "\t$3",
      "`"
    ]
  },
  "Export default Styled Component": {
    "prefix": "edstyc",
    "body": [
      "export default styled.$1`",
      "\t$2",
      "`"
    ]
  },
  "ComponentWillUnmount": {
    "prefix": "cwum",
    "body": [
      "componentWillUnmount() {",
      "\t$1",
      "}"
    ]
  },
  "Console Log": {
    "prefix": "log",
    "body": [
      "console.log('====================================');",
      "console.log($1);",
      "console.log('====================================');"
    ]
  },
  "Test Describe": {
    "prefix": "tdesc",
    "body": [
      "describe('$1', () => {",
      "\t$2",
      "});"
    ]
  },
  "Test it": {
    "prefix": "tit",
    "body": [
      "it('should $1', $2($3) => {",
      "\t$4",
      "});"
    ]
  },
  "propTypes": {
    "prefix": "rpt",
    "body": "$1.propTypes = {\n\t$2\n}",
    "description": "Creates empty propTypes declaration"
  },
  "propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type"
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required"
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "prefix": "ptet",
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptetr",
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required"
  },
  "reactClassCompoment": {
    "prefix": "rcc",
    "body": "import React, { Component } from 'react'\n\nclass ${1:componentName} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1:componentName}",
    "description": "Creates a React component class with ES6 module system"
  },
  "reactJustClassCompoment": {
    "prefix": "rcjc",
    "body": "class ${1:componentName} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
    "description": "Creates a React component class with ES6 module system"
  },
  "reactClassCompomentPropTypes": {
    "prefix": "rccp",
    "body": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ${1:componentName} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n${1:componentName}.propTypes = {\n\n}\n\nexport default ${1:componentName}",
    "description": "Creates a React component class with PropTypes and ES6 module system"
  },
  "reactClassCompomentWithMethods": {
    "prefix": "rcfc",
    "body": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ${1:componentName} extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t}\n\n\tcomponentWillMount () {\n\n\t}\n\n\tcomponentDidMount () {\n\n\t}\n\n\tcomponentWillReceiveProps (nextProps) {\n\n\t}\n\n\tshouldComponentUpdate (nextProps, nextState) {\n\n\t}\n\n\tcomponentWillUpdate (nextProps, nextState) {\n\n\t}\n\n\tcomponentDidUpdate (prevProps, prevState) {\n\n\t}\n\n\tcomponentWillUnmount () {\n\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n${1:componentName}.propTypes = {\n\n}\n\nexport default ${1:componentName}",
    "description": "Creates a React component class with PropTypes and all lifecycle methods and ES6 module system"
  },
  "reactStateless": {
    "prefix": "rsc",
    "body": "import React from 'react'\n\nconst ${1:componentName} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:componentName}",
    "description": "Creates a stateless React component without PropTypes and ES6 module system"
  },
  "reactStatelessProps": {
    "prefix": "rscp",
    "body": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ${1:componentName} = props => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t)\n}\n\n${1:componentName}.propTypes = {\n\t$0\n}\n\nexport default ${1:componentName}",
    "description": "Creates a stateless React component with PropTypes and ES6 module system"
  },
  "classConstructor": {
    "prefix": "con",
    "body": "constructor (props) {\n\tsuper(props)\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props as arguments"
  },
  "classConstructorContext": {
    "prefix": "conc",
    "body": "constructor (props, context) {\n\tsuper(props, context)\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props and context as arguments"
  },
  "emptyState": {
    "prefix": "est",
    "body": "this.state = {\n\t$1\n}",
    "description": "Creates empty state object. To be used in a constructor."
  },
  "componentRender": {
    "prefix": "ren",
    "body": "render () {\n\treturn (\n\t\t<View>\n\t\t\t$0\n\t\t</View>\n\t)\n}",
    "description": "When called, it should examine this.props and this.state and return a single child element."
  },
  "componentSetStateObject": {
    "prefix": "sst",
    "body": "this.setState($0)",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "componentSetStateFunc": {
    "prefix": "ssf",
    "body": "this.setState((state, props) => { return { $0 }})\n",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "componentProps": {
    "prefix": "props",
    "body": "this.props.$0",
    "description": "Access component's props"
  },
  "componentState": {
    "prefix": "state",
    "body": "this.state.$0",
    "description": "Access component's state"
  },
  "bindThis": {
    "prefix": "bnd",
    "body": "this.$1 = this.$1.bind(this)$0",
    "description": "Binds the this of a method. To be used inside a constructor"
  },
  "reactReduxContainer": {
    "prefix": "rrcon",
    "body": "import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\nconst mapStateToProps = (state, ownProps) => ({})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({})\n\nexport default connect(mapStateToProps, mapDispatchToProps)",
    "description": "React-redux connect boilerplate"
  },
  "StatelessFunctionComp": {
		"prefix": "slfc",
		"body": [
			"import React from 'react';",
			"import { StyleSheet, $2 } from 'react-native';",
			"import { PropTypes } from 'prop-types';",
			"",
			"const styles = StyleSheet.create({",
			"",
			"});",
			"",
			"/* eslint-disable no-use-before-define */",
			"",
			"$1.propTypes = {",
			"",
			"};",
			"",
			"function $1({ $3 }) {",
			"  return (",
			"  );",
			"}",
			"",
			"export default $1;",
			""
		],
		"description": "Stateless Functional Component"
	},
	"importChildComp": {
		"prefix": "imcc",
		"body": [
			"import $1 from './components/$1';"
		],
		"description": "Import Child Component"
	},
	"StandardComponent": {
		"prefix": "sdc",
		"body": [
			"import React, { Component } from 'react';",
			"import { StyleSheet, $2 } from 'react-native';",
			"import { PropTypes } from 'prop-types';",
			"",
			"",
			"const styles = StyleSheet.create({",
			"});",
			"",
			"export default class $1 extends Component {",
			"  state = { };",
			"",
			"  static propTypes = {",
			"    // model: PropTypes.object.isRequired,",
			"    // title: PropTypes.string,",
			"  };",
			"",
			"  static defaultProps = {",
			"  };",
			"",
			"",
			"  render() {",
			"    const { } = this.props;",
			"    return (",
			"      <$2>",
			"      </$2>",
			"    );",
			"  }",
			"}"
		],
		"description": "Standard Component React Native"
	}
}
